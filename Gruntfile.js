module.exports = function (grunt){
    require('time-grunt')(grunt);
	var resources = 'dest/resources/',
		asset = {
			'images': 'asset/images',
			'css': 'asset/css',
			'scripts': 'asset/scripts'
		},
		dest = {
			'images': resources + '/images',
			'css': resources + '/css',
			'scripts': resources + '/scripts'
		},
		tasks = {},
		banner = '/*\n' +
            '* <%= pkg.title || pkg.name %> - v<%= pkg.version %>\n' +
            '* Generated by grunt, <%= grunt.template.today(\'yyyy/mm/dd HH:mm:ss\') %>\n' +
            '* Copyright <%= grunt.template.today(\'yyyy\') %> SYNNEX Corporation.  \n' +
            '*/\n';

    tasks.sprite = function (){
    	return {
    		all: {
    		  // 待合并的文件
    		  src               : asset.images + '/ui-icon' + '/*.png',
    		  // 合并后输出的文件
    		  dest              : dest.images + '/ui-icon.png',
    		  // 输出对应雪碧图的样式
    		  destCss           : asset.css + '/_ui-icon.less',
    		  // 可选: 手动指定样式里引用图片的路径
    		  imgPath           : '../images/ui-icon.png',
    		  cssVarMap: function(sprite) {
    		      sprite.name = sprite.name.replace(/^\s{1}/, ''); //去除文件名前空白
    		      sprite.name = sprite.name.replace('@2x', '');
    		      sprite.name = sprite.name.replace(/^\d\./, '');
    		      sprite.name = sprite.name.toLowerCase();
    		      sprite.name = 'icon-' + sprite.name;
    		  },
    		  // 可选: 指定算法 (top-down, left-right, diagonal,alt-diagonal, binary-tree )等
    		  // 默认是top-down,二叉树合并出来的图体积最小
    		  algorithm         : 'binary-tree',
    		  // 可选: 指定CSS格式 (默认根据destCSS中的后缀设置格式)
    		  // (stylus, scss, scss_maps, sass, less, json, json_array, css)
    		  cssFormat        : 'less',
    		  padding: 10
    		}
    	}
    };

    tasks.copy = function () {
        return {
            css: {
                files: [
                    { expand: true, cwd: asset.css + '/', src: ['*.css'], dest: dest.css + '/' }
                ]
            },
            images: {
                files: [
                    { expand: true, cwd: asset.images + '/', src: ['*.{png,jpg,gif,jpeg}'], dest: dest.images + '/' },
                ]
            },
            scripts: {
                files: [
                ]
            }
        }
    };

    tasks.less = function (){
        return {
            options: {
                paths: asset.css
            },
            default: {
                files: [
                    { expand: true, cwd: asset.css + '/', src: 'default.less', dest: dest.css, ext: '.css' }
                ]
            }
        }
    };

    tasks.concat = function(){
    	return {
    		scripts: {
    			options: {
    				separator: '\n\n'
    			},
    			files: [
    				{
    					src: [
                            // 资源目录
    						asset.scripts + '/libs/jq/jquery.min.js',
    						asset.scripts + '/libs/jqm/jquery.mobile-1.4.5.min.js'
    					],
                            // 生成后的文件
    					dest: dest.scripts + '/libs.js'
    				},
    				{
                        //将资源目录下的 customer.js 生成为 default.js
    					src: [
    						asset.scripts + '/custom.js'
    					],
    					dest: dest.scripts + '/default.js'
    				}
    			]
    		}
    	}
    };

    tasks.watch = function (){
        return {
            sprite: {
                options: {
                    spawn: false,
                    cwd: asset.images + '/ui-icon/'
                },
                files: '*.png',
                tasks: [
                    'sprite: all'
                ]
            },
            images: {
                options: {
                    spawn: false,
                    cwd: asset.images + '/'
                },
                files: ['*.{png,jpg,gif,jpeg}'],
                tasks: 'copy: images'
            },
            css: {
                options: {
                    spawn: false,
                    cwd: asset.css + '/'
                },
                files: '**/*',
                tasks: [
                    'less',
                    'copy: css'
                ]
            },
            js: {
                options: {
                    spawn: false,
                    cwd: asset.scripts + '/'
                },
                files: '*.js',
                tasks: 'concat: scripts'
            }
        }
    };

    tasks.cssmin = function (){
        return {
            options: {
                banner: banner,
                report: 'min'
            },
            minify: {
                files: [
                    { expand: true, cwd: dest.css + '/', src: ['*.css', '!*.min.css'], dest: dest.css + '/', ext: '.css' }
                ]
            }
        }
    };

    tasks.imagemin = function (){
         return {
            options: {
                optimizationLevel: 3
            },
            minify:{
                files: [
                    { expand: true, cwd: dest.images + '/', src: ['**/*.{png,jpg,gif}'], dest: dest.images + '/' }
                ]
            }
        }
    };

    tasks.uglify = function (){
        return {
            options: {
                banner: banner,
                report: "min"
            },
            minify: {
                files: [
                    { expand: true, cwd: dest.scripts + '/', src: ['*.js', '!*.min.js'], dest: dest.scripts + '/', ext: '.js' }
                ]
            }
        }
    };

    tasks.clean = function (){
        return {
            build: {
                options: {
                    force: true
                },
                src: resources
            }
        }
    };

	grunt.initConfig({
	    pkg: grunt.file.readJSON('package.json'),
	    sprite: tasks.sprite(),
	    concat: tasks.concat(),
        copy: tasks.copy(),
        less: tasks.less(),
        watch: tasks.watch(),
        cssmin: tasks.cssmin(),
        clean: tasks.clean(),
        uglify: tasks.uglify(),
        imagemin: tasks.imagemin()
    });

	grunt.loadNpmTasks('grunt-spritesmith');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-less');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
	grunt.loadNpmTasks('grunt-contrib-imagemin');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-clean');

	grunt.registerTask('default', [
	    'sprite',
        'less',
	    'concat',
        'watch'
	]);

    grunt.registerTask('build', [
        'clean',
        'sprite',
        'copy',
        'less',
        'concat',
        'uglify',
        'cssmin',
        'imagemin'
    ]);
};
